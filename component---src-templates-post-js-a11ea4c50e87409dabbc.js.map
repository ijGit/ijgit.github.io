{"version":3,"sources":["webpack:///./src/components/comment/comment.jsx","webpack:///./src/components/toc/toc.jsx","webpack:///./src/templates/post.js"],"names":["Comment","colorMode","useColorMode","src","containerRef","useRef","useEffect","comment","attributes","message","themeMode","utterancesEl","current","querySelector","type","theme","contentWindow","postMessage","document","createElement","config","githubInfo","Object","entries","forEach","key","value","setAttribute","appendChild","ref","Toc","styled","div","TOC","props","toc","dangerouslySetInnerHTML","__html","TagList","tags","map","tag","console","log","className","MetaWrapper","PostTemplate","data","markdownRemark","frontmatter","html","tableOfContents","siteData","site","id","title","date","query"],"mappings":"yTAIaA,EAAU,WAAO,IACrBC,EAAaC,cADO,GAErBC,EAAI,gCAIJC,EAAeC,iBAAO,MA+B5B,OA9BAC,qBAAU,WAER,IAEQC,EACAC,EAgBAC,EAnBFC,EAA0B,SAAdT,EAJD,cADC,eA8BZU,EAAeP,EAAaQ,QAAQC,cA/BjB,2BAgCzBF,GAPQF,EAAU,CACdK,KAAM,YACNC,MAAOL,GAETC,EAAaK,cAAcC,YAAYR,EAASN,KArB1CI,EAAUW,SAASC,cAAc,UACjCX,EAAa,CACjB,IAAM,GAAIL,EACV,KAAQiB,IAAOC,WACf,aAAc,WACd,MAASX,EACT,YAAe,YACf,OAAS,EACT,mBAAqB,EACrB,uBAAyB,GAE3BY,OAAOC,QAAQf,GAAYgB,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDnB,EAAQoB,aAAaF,EAAKC,MAE5BtB,EAAaQ,QAAQgB,YAAYrB,MAWlC,CAACN,IACG,mBAAK4B,IAAKzB,K,YCtCb0B,EAAMC,IAAOC,IAAV,+DAAGD,CAAH,gIAWIE,EAAM,SAAAC,GACjB,IAAMC,EAAMD,EAAMC,IAElB,OAAO,YAACL,EAAD,CAAKM,wBAAyB,CAAEC,OAAQF,MCJpCG,G,UAAU,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxB,OACE,8BACGA,EAAKC,KAAI,SAAAC,GAER,OADAC,QAAQC,IAAIF,GACJ,oBAAMG,UAAU,OAAOnB,IAAKgB,GAAMA,SAO5CI,EAAcd,IAAOC,IAAV,wEAAGD,CAAH,mLAeF,SAASe,EAAT,GAAiC,IAATC,EAAQ,EAARA,KAE7BC,EAAmBD,EAAnBC,eACAC,EAAuCD,EAAvCC,YAAaC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,gBAC3B,OACE,YAAC,IAAD,CAAQC,SAAUL,EAAKM,MACrB,wBACE,mBAAKT,UAAU,gBACb,YAAC,EAAD,CAAKT,IAAKgB,KAEZ,uBAASG,GAAG,WACV,2BACE,mBAAKV,UAAU,uBACb,mBAAKA,UAAU,aACb,YAACC,EAAD,KACE,sBAAKI,EAAYM,OACjB,mBAAKX,UAAU,QAAQK,EAAYO,MACnC,mBAAKZ,UAAU,QACb,YAAC,EAAD,CAASL,KAAMU,EAAYV,SAI/B,mBAAKK,UAAU,iBACb,YAAC,EAAD,CAAKT,IAAKgB,KAGZ,mBACEP,UAAU,oBACVR,wBAAyB,CAAEC,OAAQa,QAK3C,uBAEE,YAAC,EAAD,UAQL,IAAMO,EAAK,c","file":"component---src-templates-post-js-a11ea4c50e87409dabbc.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport config from '../../../_config'\nimport { useColorMode } from 'theme-ui';\n\nexport const Comment = () => {\n  const [colorMode] = useColorMode();\n  const src=\"https://utteranc.es/client.js\";\n  const utterancesSelector = 'iframe.utterances-frame';\n  const LIGHT_THEME = 'github-light';\n  const DARK_THEME = 'photon-dark'; // \"dark-blue\" \n  const containerRef = useRef(null);\n  useEffect(()=>{\n    \n    const themeMode = colorMode === 'dark' ? DARK_THEME : LIGHT_THEME;\n    const createUtterancesEl = () => {\n      const comment = document.createElement('script');\n      const attributes = {\n        'src': `${src}`,\n        'repo': config.githubInfo,\n        'issue-term': \"pathname\",\n        'theme': themeMode,\n        'crossorigin': 'anonymous',\n        'async': true,\n        \"chromeWebSecurity\": false,\n        \"modifyObstructiveCode\": false\n      };\n      Object.entries(attributes).forEach(([key, value]) => {\n        comment.setAttribute(key, value);\n      });\n      containerRef.current.appendChild(comment);\n    }\n    const postThemeMessage = () => {\n      const message = {\n        type: 'set-theme',\n        theme: themeMode,\n      };\n      utterancesEl.contentWindow.postMessage(message, src);\n    };\n    const utterancesEl = containerRef.current.querySelector(utterancesSelector);\n    utterancesEl ? postThemeMessage() : createUtterancesEl();\n  }, [colorMode]);\n  return <div ref={containerRef} />;\n}\n\n\n\n// reference: https://www.sungikchoi.com/blog/gatsby-dark-mode/","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Toc = styled.div`\n  opacity: 0.6;\n  margin: 1rem 0 1rem 0;\n  border-left: 4px solid;\n  font-size: 0.85em;\n  ul,li {\n    list-style-type: none;\n  }\n  li:hover {opacity: 0.9;}\n`\n\nexport const TOC = props => {\n  const toc = props.toc\n\n  return <Toc dangerouslySetInnerHTML={{ __html: toc }} />\n}\n","import React from 'react'\r\n// import { useEffect, useState, useCallback, Suspense, useRef } from 'react';\r\n// import { useColorMode } from 'theme-ui';\r\nimport { graphql } from \"gatsby\"\r\nimport { Layout } from './../components/layout/layout'\r\nimport './../styles/code-style.scss'\r\nimport { Comment } from './../components/comment/comment'\r\nimport { TOC } from './../components/toc/toc'\r\n\r\nimport styled from 'styled-components';\r\nimport './post.scss';\r\n\r\n\r\nexport const TagList = ({ tags }) => {\r\n  return(\r\n    <>\r\n      {tags.map(tag => {\r\n        console.log(tag);\r\n        return (<span className='item' key={tag}>{tag}</span>)\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst MetaWrapper = styled.div`\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #8383837e;\r\n  .date, .tags{\r\n    font-size: .9rem;\r\n    font-weight: 400;\r\n    opacity: .8;\r\n  }\r\n  .tags .item{\r\n    span{margin-right: .5em;}\r\n    span:before{content: '#';}   }\r\n  }\r\n`\r\n\r\n\r\nexport default function PostTemplate({ data }) {\r\n\r\n  const { markdownRemark } = data // data.markdownRemark holds your post data\r\n  const { frontmatter, html, tableOfContents } = markdownRemark;\r\n  return (\r\n    <Layout siteData={data.site}>\r\n      <main>\r\n        <div className='toc-fullsize'>\r\n          <TOC toc={tableOfContents} />\r\n        </div>\r\n        <section id=\"content\">\r\n          <article>\r\n            <div className=\"blog-post-container\">\r\n              <div className=\"blog-post\">\r\n                <MetaWrapper>\r\n                  <h1>{frontmatter.title}</h1>\r\n                  <div className=\"date\">{frontmatter.date}</div>\r\n                  <div className=\"tags\">\r\n                    <TagList tags={frontmatter.tags} />\r\n                  </div>\r\n\r\n                </MetaWrapper>\r\n                <div className='toc-smallsize'>\r\n                  <TOC toc={tableOfContents}/>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"blog-post-content\"\r\n                  dangerouslySetInnerHTML={{ __html: html }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </article>\r\n          <div>\r\n\r\n            <Comment></Comment>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(fields: {slug: {eq: $slug}}) {\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        title\r\n        tags\r\n      }\r\n      fields{\r\n        slug\r\n      }\r\n      tableOfContents(maxDepth: 3)\r\n    }\r\n  }\r\n`"],"sourceRoot":""}