{"version":3,"sources":["webpack:///./src/templates/post.jsx","webpack:///./src/components/comment/index.jsx","webpack:///./src/components/tags/index.jsx","webpack:///./src/components/toc/toc.jsx"],"names":["MetaWrapper","styled","div","PostTemplate","data","markdownRemark","frontmatter","html","excerpt","tableOfContents","title","description","keywords","tags","siteData","site","className","toc","date","dangerouslySetInnerHTML","__html","Comment","colorMode","useColorMode","src","containerRef","useRef","useEffect","comment","attributes","message","themeMode","utterancesEl","current","querySelector","type","theme","contentWindow","postMessage","document","createElement","config","githubInfo","Object","entries","forEach","key","value","setAttribute","appendChild","ref","TagsContainer","TagList","map","tag","Toc","TOC","props"],"mappings":"oHAAA,wKAcMA,GAdN,oBAcoBC,IAAOC,IAAV,oEAAGD,CAAH,sJAaF,SAASE,EAAT,GAAiC,IAATC,EAAQ,EAARA,KAE7BC,EAAmBD,EAAnBC,eACAC,EAAgDD,EAAhDC,YAAaC,EAAmCF,EAAnCE,KAAMC,EAA6BH,EAA7BG,QAASC,EAAoBJ,EAApBI,gBACpC,OACE,kCACA,gBAAC,IAAD,CAAMC,MAAOJ,EAAYI,MAAOC,YAAaH,EAASI,SAAWN,EAAYO,OAC7E,gBAAC,IAAD,CAAQC,SAAUV,EAAKW,MACrB,uBAAKC,UAAU,gBACb,gBAAC,IAAD,CAAKC,IAAKR,KAGV,+BACI,uBAAKO,UAAU,aAEb,gBAAChB,EAAD,KACE,sBAAIgB,UAAU,mBAAmBV,EAAYI,OAC7C,uBAAKM,UAAU,QACZV,EAAYY,MAEf,gBAAC,IAAD,CAASL,KAAMP,EAAYO,QAG7B,uBAAKG,UAAU,iBACb,gBAAC,IAAD,CAAKC,IAAKR,KAGZ,uBACEO,UAAU,oBACVG,wBAAyB,CAAEC,OAAQb,OAK3C,2BAEE,gBAAC,IAAD,W,yDC/DV,+FAIac,EAAU,WAAO,IACrBC,EAAaC,cADO,GAErBC,EAAI,gCAIJC,EAAeC,iBAAO,MA+B5B,OA9BAC,qBAAU,WAER,IAEQC,EACAC,EAgBAC,EAnBFC,EAA0B,SAAdT,EAJD,cADC,eA8BZU,EAAeP,EAAaQ,QAAQC,cA/BjB,2BAgCzBF,GAPQF,EAAU,CACdK,KAAM,YACNC,MAAOL,GAETC,EAAaK,cAAcC,YAAYR,EAASN,KArB1CI,EAAUW,SAASC,cAAc,UACjCX,EAAa,CACjB,IAAM,GAAIL,EACV,KAAQiB,IAAOC,WACf,aAAc,WACd,MAASX,EACT,YAAe,YACf,OAAS,EACT,mBAAqB,EACrB,uBAAyB,GAE3BY,OAAOC,QAAQf,GAAYgB,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDnB,EAAQoB,aAAaF,EAAKC,MAE5BtB,EAAaQ,QAAQgB,YAAYrB,MAWlC,CAACN,IACG,uBAAK4B,IAAKzB,O,yDCzCnB,4DAGM0B,EAHN,UAGsBlD,EAAOC,IAAV,0EAAGD,CAAH,iJAgBNmD,EAAU,SAAC,GAAc,IAAZvC,EAAW,EAAXA,KACxB,OACE,gBAACsC,EAAD,KACGtC,EAAKwC,KAAI,SAAAC,GACR,OAAQ,wBAAMtC,UAAU,WAAW8B,IAAKQ,GAAMA,U,gFCvBtD,4DAGMC,EAHN,UAGYtD,EAAOC,IAAV,+DAAGD,CAAH,gIAWIuD,EAAM,SAAAC,GACjB,IAAMxC,EAAMwC,EAAMxC,IAElB,OAAO,gBAACsC,EAAD,CAAKpC,wBAAyB,CAAEC,OAAQH,Q","file":"component---src-templates-post-jsx-8398594af9d03e0ead4d.js","sourcesContent":["import React from 'react'\r\nimport { graphql } from \"gatsby\"\r\nimport { Layout } from '../components/layout/layout'\r\nimport './../styles/code-style.scss'\r\nimport { Comment } from '../components/comment'\r\nimport { TOC } from '../components/toc/toc'\r\nimport { TagList } from '../components/tags'\r\nimport { Head } from \"../components/head/head\"\r\n\r\nimport styled from 'styled-components';\r\nimport \"katex/dist/katex.min.css\"\r\nimport './post.scss';\r\n\r\n\r\nconst MetaWrapper = styled.div`\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #8383837e;\r\n  font-size: .9rem;\r\n  font-weight: 400;\r\n\r\n  .date{\r\n    display: inline-block;\r\n    margin-right: 1rem;\r\n    opacity: .8;\r\n  }\r\n`\r\n\r\nexport default function PostTemplate({ data }) {\r\n\r\n  const { markdownRemark } = data // data.markdownRemark holds your post data\r\n  const { frontmatter, html, excerpt, tableOfContents } = markdownRemark;\r\n  return (\r\n    <>\r\n    <Head title={frontmatter.title} description={excerpt} keywords={(frontmatter.tags)} />\r\n    <Layout siteData={data.site}>\r\n      <div className='toc-fullsize'>\r\n        <TOC toc={tableOfContents} />\r\n      </div>\r\n\r\n        <article>\r\n            <div className=\"blog-post\">\r\n\r\n              <MetaWrapper>\r\n                <h1 className='blog-post-title'>{frontmatter.title}</h1>\r\n                <div className='date'>\r\n                  {frontmatter.date}\r\n                </div>\r\n                <TagList tags={frontmatter.tags} />\r\n              </MetaWrapper>\r\n\r\n              <div className='toc-smallsize'>\r\n                <TOC toc={tableOfContents} />\r\n              </div>\r\n\r\n              <div\r\n                className=\"blog-post-content\"\r\n                dangerouslySetInnerHTML={{ __html: html }}\r\n              />\r\n\r\n            </div>\r\n        </article>\r\n        <div>\r\n\r\n          <Comment></Comment>\r\n        </div>\r\n    </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(fields: {slug: {eq: $slug}}) {\r\n      html\r\n      excerpt\r\n      frontmatter {\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        title\r\n        tags\r\n        keywords\r\n      }\r\n      fields{\r\n        slug\r\n      }\r\n      tableOfContents(maxDepth: 3)\r\n    }\r\n  }\r\n`","import React, { useRef, useEffect } from 'react';\nimport config from '../../../config/_config'\nimport { useColorMode } from 'theme-ui';\n\nexport const Comment = () => {\n  const [colorMode] = useColorMode();\n  const src=\"https://utteranc.es/client.js\";\n  const utterancesSelector = 'iframe.utterances-frame';\n  const LIGHT_THEME = 'github-light';\n  const DARK_THEME = 'photon-dark'; // \"dark-blue\" \n  const containerRef = useRef(null);\n  useEffect(()=>{\n    \n    const themeMode = colorMode === 'dark' ? DARK_THEME : LIGHT_THEME;\n    const createUtterancesEl = () => {\n      const comment = document.createElement('script');\n      const attributes = {\n        'src': `${src}`,\n        'repo': config.githubInfo,\n        'issue-term': \"pathname\",\n        'theme': themeMode,\n        'crossorigin': 'anonymous',\n        'async': true,\n        \"chromeWebSecurity\": false,\n        \"modifyObstructiveCode\": false\n      };\n      Object.entries(attributes).forEach(([key, value]) => {\n        comment.setAttribute(key, value);\n      });\n      containerRef.current.appendChild(comment);\n    }\n    const postThemeMessage = () => {\n      const message = {\n        type: 'set-theme',\n        theme: themeMode,\n      };\n      utterancesEl.contentWindow.postMessage(message, src);\n    };\n    const utterancesEl = containerRef.current.querySelector(utterancesSelector);\n    utterancesEl ? postThemeMessage() : createUtterancesEl();\n  }, [colorMode]);\n  return <div ref={containerRef} />;\n}\n\n\n\n// reference: https://www.sungikchoi.com/blog/gatsby-dark-mode/","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst TagsContainer = styled.div` \n  display: inline-block;\n\n  font-size: 0.85rem;\n  opacity: 0.5;\n  \n  .tag-item{\n    opacity: 1;\n    margin-right: .5rem;\n  }\n  .tag-item:hover{\n    opacity: 1;\n    margin-right: .5rem;\n  }\n`\n\nexport const TagList = ({ tags }) => {\n  return(\n    <TagsContainer>\n      {tags.map(tag => {\n        return (<span className='tag-item' key={tag}>{tag}</span>)\n      })}\n    </TagsContainer>\n  )\n}","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Toc = styled.div`\n  opacity: 0.6;\n  margin: 1rem 0 1rem 0;\n  border-left: 4px solid;\n  font-size: 0.85em;\n  ul,li {\n    list-style-type: none;\n  }\n  li:hover {opacity: 0.9;}\n`\n\nexport const TOC = props => {\n  const toc = props.toc\n\n  return <Toc dangerouslySetInnerHTML={{ __html: toc }} />\n}\n"],"sourceRoot":""}