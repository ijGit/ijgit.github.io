{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["BackButton","styled","div","PostListContainer","PostList","ul","PostRep","li","PostRepHeader","h3","PostRepDate","PostRepExcerpt","Tags","edges","data","allMarkdownRemark","to","map","node","slug","fields","title","frontmatter","key","className","date","excerpt","pageQuery"],"mappings":"4FAAA,+GAWMA,EAAaC,IAAOC,IAAV,mEAAGD,CAAH,uBAIVE,EAAoBF,IAAOC,IAAV,0EAAGD,CAAH,yCAKjBG,EAAWH,IAAOI,GAAV,iEAAGJ,CAAH,8BAIRK,EAAUL,IAAOM,GAAV,gEAAGN,CAAH,wCAIPO,EAAgBP,IAAOQ,GAAV,sEAAGR,CAAH,yCAKbS,EAAcT,IAAOC,IAAV,oEAAGD,CAAH,mCAIXU,EAAiBV,IAAOC,IAAV,uEAAGD,CAAH,kJAkELW,UApDF,SAAC,GAAc,IAClBC,EADiB,EAAXC,KACSC,kBAAfF,MACR,OACE,YAAC,IAAD,KACE,YAACb,EAAD,KACI,YAAC,IAAD,CAAMgB,GAAG,KAAT,SAEJ,YAACb,EAAD,KAEA,YAACC,EAAD,KACGS,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACE,YAACf,EAAD,CAASiB,IAAKJ,GACZ,mBAAKK,UAAU,YACf,YAAChB,EAAD,KAAe,YAAC,IAAD,CAAMQ,GAAIG,GAAOE,IAChC,YAACX,EAAD,CAAac,UAAU,iBAAiBN,EAAKI,YAAYG,MACzD,YAACd,EAAD,CAAgBa,UAAU,oBAAoBN,EAAKQ,kBAoC1D,IAAMC,EAAS","file":"component---src-templates-tags-js-5a28361a8a8f2091300b.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\n\nimport styled from 'styled-components';\n\nimport { Layout } from \"../components/layout/layout\";\n\nconst BackButton = styled.div`\n  margin-bottom: 5vh\n`\n\nconst PostListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PostList = styled.ul`\n  margin-left: 0;\n  padding: 0;\n`\nconst PostRep = styled.li`\n  list-style: none;\n  margin-bottom: 9vh;\n`\nconst PostRepHeader = styled.h3`\n  font-size: 1.2rem;  \n  margin-bottom: 1vh;\n`\n\nconst PostRepDate = styled.div`\n  font-size: 0.85rem;  \n  opacity: .7;\n`\nconst PostRepExcerpt = styled.div`\n  font-size: 0.9rem;\n  opacity: .8;\n  \n  -webkit-line-clamp:2;\n  line-height: 1.5rem;\n  height: 3rem;\n  \n  word-wrap:break-word; \n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\n// pageContext\nconst Tags = ({ data }) => {\n  const { edges } = data.allMarkdownRemark\n  return (\n    <Layout>\n      <BackButton>\n          <Link to=\"/\">back</Link>\n      </BackButton>\n      <PostListContainer>\n        \n      <PostList>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <PostRep key={slug}>\n              <div className='post-rep'>\n              <PostRepHeader><Link to={slug}>{title}</Link></PostRepHeader>\n              <PostRepDate className='post-rep-date'>{node.frontmatter.date}</PostRepDate>\n              <PostRepExcerpt className='post-rep-excerpt'>{node.excerpt}</PostRepExcerpt>\n              </div>\n            </PostRep>\n          )\n        })}\n      </PostList>\n        </PostListContainer>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            tags\n            title\n            date(formatString: \"YYYY-MM-DD\")\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}