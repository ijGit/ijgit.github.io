{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["TagList","tags","map","tag","className","key","BackButton","styled","div","PostListContainer","PostList","ul","PostRep","li","PostRepHeader","h3","PostRepDate","PostRepTags","PostRepExcerpt","Tags","data","edges","allMarkdownRemark","title","site","siteMetadata","siteData","id","to","node","slug","fields","frontmatter","date","excerpt","pageQuery"],"mappings":"4FAAA,8KAQaA,EAAU,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxB,OACE,8BACGA,EAAKC,KAAI,SAAAC,GAER,OAAQ,oBAAMC,UAAU,OAAOC,IAAKF,GAAMA,QAO5CG,EAAaC,IAAOC,IAAV,mEAAGD,CAAH,uBAIVE,EAAoBF,IAAOC,IAAV,0EAAGD,CAAH,yCAKjBG,EAAWH,IAAOI,GAAV,iEAAGJ,CAAH,8BAIRK,EAAUL,IAAOM,GAAV,gEAAGN,CAAH,wCAIPO,EAAgBP,IAAOQ,GAAV,sEAAGR,CAAH,yCAKbS,EAAcT,IAAOC,IAAV,oEAAGD,CAAH,6EAMXU,EAAcV,IAAOC,IAAV,oEAAGD,CAAH,gIAcXW,EAAiBX,IAAOC,IAAV,uEAAGD,CAAH,kJA0ELY,UA5DF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACNC,EAAUD,EAAKE,kBAAfD,MACR,OACE,8BACA,YAAC,IAAD,CAAME,MAAOH,EAAKI,KAAKC,aAAaF,QACpC,YAAC,IAAD,CAAQG,SAAUN,EAAKI,MACnB,uBAASG,GAAG,WACV,YAACrB,EAAD,KACE,YAAC,IAAD,CAAMsB,GAAG,KAAT,SAEF,YAACnB,EAAD,KAEE,YAACC,EAAD,KACGW,EAAMnB,KAAI,YAAe,IAAZ2B,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAP,EAAUM,EAAKG,YAAfT,MACR,OACE,YAACX,EAAD,CAASP,IAAKyB,GACZ,mBAAK1B,UAAU,YACb,YAACU,EAAD,KAAe,YAAC,IAAD,CAAMc,GAAIE,GAAOP,IAChC,YAACP,EAAD,CAAaZ,UAAU,iBAAiByB,EAAKG,YAAYC,MACzD,YAAChB,EAAD,KACE,YAACjB,EAAD,CAASC,KAAM4B,EAAKG,YAAY/B,QAElC,YAACiB,EAAD,CAAgBd,UAAU,oBAAoByB,EAAKK,oBAsClE,IAAMC,EAAS","file":"component---src-templates-tags-js-7d5cb633aa1d29312b9e.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from 'styled-components';\nimport { Head } from \"./../components/head/head\"\nimport { Layout } from \"../components/layout/layout\";\n\n\nexport const TagList = ({ tags }) => {\n  return(\n    <>\n      {tags.map(tag => {\n        //console.log(tag);\n        return (<span className='item' key={tag}>{tag}</span>)\n      })}\n    </>\n  )\n}\n\n\nconst BackButton = styled.div`\n  margin-bottom: 5vh\n`\n\nconst PostListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PostList = styled.ul`\n  margin-left: 0;\n  padding: 0;\n`\nconst PostRep = styled.li`\n  list-style: none;\n  margin-bottom: 9vh;\n`\nconst PostRepHeader = styled.h3`\n  font-size: 1.2rem;  \n  margin-bottom: 1vh;\n`\n\nconst PostRepDate = styled.div`\n  display: inline-block;\n  font-size: 0.85rem;\n  opacity: 0.7;\n  padding-right: .5rem;\n`\nconst PostRepTags = styled.div` \n  display: inline-block;\n  margin-left: 1rem;\n\n  font-size: 0.85rem;\n  opacity: 0.7;\n\n  .item{\n    margin-right: .5rem;\n  }\n  .item:before{\n    content: '#';\n  }\n`\nconst PostRepExcerpt = styled.div`\n  font-size: 0.9rem;\n  opacity: .8;\n  \n  -webkit-line-clamp:2;\n  line-height: 1.5rem;\n  height: 3rem;\n  \n  word-wrap:break-word; \n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\n// pageContext\nconst Tags = ({ data }) => {\n  const { edges } = data.allMarkdownRemark\n  return (\n    <>\n    <Head title={data.site.siteMetadata.title} />\n    <Layout siteData={data.site}>\n        <section id=\"content\">\n          <BackButton>\n            <Link to=\"/\">back</Link>\n          </BackButton>\n          <PostListContainer>\n\n            <PostList>\n              {edges.map(({ node }) => {\n                const { slug } = node.fields\n                const { title } = node.frontmatter\n                return (\n                  <PostRep key={slug}>\n                    <div className='post-rep'>\n                      <PostRepHeader><Link to={slug}>{title}</Link></PostRepHeader>\n                      <PostRepDate className='post-rep-date'>{node.frontmatter.date}</PostRepDate>\n                      <PostRepTags>\n                        <TagList tags={node.frontmatter.tags} />\n                      </PostRepTags>\n                      <PostRepExcerpt className='post-rep-excerpt'>{node.excerpt}</PostRepExcerpt>\n                    </div>\n                  </PostRep>\n                )\n              })}\n            </PostList>\n          </PostListContainer>\n        </section>\n    </Layout>\n    </>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            tags\n            title\n            date(formatString: \"YYYY-MM-DD\")\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}