{"version":3,"sources":["webpack:///./src/templates/category-page.js"],"names":["Container","styled","div","TitleWrapper","MetaWrapper","ExcerptWrapper","PostItem","props","key","to","title","className","date","tags","map","tag","excerpt","Template","data","posts","allMarkdownRemark","site","siteMetadata","category","markdownRemark","frontmatter","root","edges","post","node","id","fields","slug","pageQuery"],"mappings":"2FAAA,uJAOMA,EAAYC,IAAOC,IAAV,2EAAGD,CAAH,sCAITE,EAAeF,IAAOC,IAAV,8EAAGD,CAAH,gEAMZG,EAAcH,IAAOC,IAAV,6EAAGD,CAAH,0IAmBXI,EAAiBJ,IAAOC,IAAV,gFAAGD,CAAH,0JAqBdK,EAAW,SAAAC,GAAK,OACpB,YAACP,EAAD,CAAWQ,IAAKD,EAAMC,KACpB,YAACL,EAAD,UAAgB,sBAAI,YAAC,OAAD,CAAMM,GAAIF,EAAME,IAAhB,IAAsBF,EAAMG,QAAhD,MACA,YAACN,EAAD,KACE,oBAAMO,UAAU,QAAQJ,EAAMK,MAC9B,mBAAKD,UAAU,SACZ,SAAAJ,GAAK,OAAmB,MAAdA,EAAMM,KAAgB,GAAMN,EAAMM,KAAKC,KAAI,SAAAC,GAAG,OAAK,wBAAOA,UAGzE,YAACV,EAAD,KAAiBE,EAAMS,WAKZ,SAASC,EAAT,GAAkC,IAAD,IAAbC,YAAa,MAAN,GAAM,EAEnBC,EAAUD,EAA7BE,kBACFV,EAAQQ,EAAKG,KAAKC,aAAaZ,MACjCa,EAAWL,EAAKM,eAAeC,YAAYF,SAG/C,OAFAA,EAAuB,MAAZA,EAAmB,YAAcA,EAG1C,YAAC,IAAD,CAAQG,KAAMR,EAAKG,KAAKC,aAAaZ,MAAOA,MAAOA,EAAOa,SAAUA,GACjEJ,EAAMQ,MAAMb,KAAI,SAAAc,GAAI,OAEnB,YAACtB,EAAD,CACEE,IAAKoB,EAAKC,KAAKC,GACfrB,GAAImB,EAAKC,KAAKE,OAAOC,KACrBtB,MAAOkB,EAAKC,KAAKJ,YAAYf,MAC7BE,KAAMgB,EAAKC,KAAKJ,YAAYb,KAC5BW,SAAUK,EAAKC,KAAKJ,YAAYF,SAChCV,KAAMe,EAAKC,KAAKJ,YAAYZ,KAC5BG,QAASY,EAAKC,KAAKb,cAOtB,IAAMiB,EAAS","file":"component---src-templates-category-page-js-1e5b42d9ffdf6de621a1.js","sourcesContent":["// src/template/category-page.js\r\n\r\nimport React from 'react';\r\nimport { graphql, Link } from 'gatsby';\r\nimport { Layout } from '../components/layout/layout';\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  margin-bottom: 3rem;\r\n  height: 10em;\r\n}`\r\nconst TitleWrapper = styled.div`\r\n  margin: bottom: .5em;\r\n  h3{\r\n    margin-top: .1em;\r\n    margin-bottom: .3em;\r\n  }`\r\nconst MetaWrapper = styled.div`\r\n  margin-bottom: .5em;\r\n\r\n  .date, .tags{\r\n    font-size: .9rem;\r\n    font-weight: 400;\r\n    opacity: .8;\r\n  }\r\n  .tags{\r\n    span{\r\n      margin-right: .5em;\r\n    }\r\n    span:before{\r\n      content: '#';\r\n      }   \r\n    }\r\n  }\r\n\r\n`\r\nconst ExcerptWrapper = styled.div`\r\n  opacity: .9;\r\n  max-height: 6em;\r\n  \r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 3;\r\n  -webkit-box-orient: vertical;\r\n\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  \r\n  width: inherit;\r\n`\r\n\r\n\r\n\r\n/*\r\ndata come from graphQL query then can be\r\nrendered in our template\r\n*/\r\n\r\nconst PostItem = props => (\r\n  <Container key={props.key}>\r\n    <TitleWrapper>  <h3><Link to={props.to}> {props.title}</Link></h3>  </TitleWrapper>\r\n    <MetaWrapper>\r\n      <span className=\"date\">{props.date}</span>\r\n      <div className=\"tags\">\r\n        {props => (props.tags == null) ? \"\" : (props.tags.map(tag => (<span>{tag}</span>)))}\r\n      </div>\r\n    </MetaWrapper>\r\n    <ExcerptWrapper>{props.excerpt}</ExcerptWrapper>\r\n  </Container>\r\n)\r\n\r\n\r\nexport default function Template({ data = [] }) {\r\n\r\n  const { allMarkdownRemark: posts } = data;\r\n  const title = data.site.siteMetadata.title;\r\n  var category = data.markdownRemark.frontmatter.category;\r\n  category = category == null ? 'undefined' : category;\r\n\r\n  return (\r\n    <Layout root={data.site.siteMetadata.title} title={title} category={category}>\r\n      {posts.edges.map(post => (\r\n\r\n        <PostItem\r\n          key={post.node.id}\r\n          to={post.node.fields.slug}\r\n          title={post.node.frontmatter.title}\r\n          date={post.node.frontmatter.date}\r\n          category={post.node.frontmatter.category}\r\n          tags={post.node.frontmatter.tags}\r\n          excerpt={post.node.excerpt}\r\n        />\r\n      ))}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query categoryQuery($eq: String, $slug: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        url\r\n        language\r\n      }\r\n    }\r\n    allMarkdownRemark(limit: 1000, sort: {fields: frontmatter___date, order: DESC}, \r\n      filter: {frontmatter: {category: {eq: $eq }, type: {ne: \"category\"}}}) {\r\n      edges{\r\n        node{\r\n          id\r\n          frontmatter {\r\n            category\r\n            date(formatString: \"YYYY-MM-DD\")\r\n            title\r\n            tags\r\n            description\r\n          }\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n    markdownRemark(fields: {slug: {eq: $slug}}) {\r\n      frontmatter {\r\n        category\r\n        description\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}