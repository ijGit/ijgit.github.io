{"version":3,"sources":["webpack:///./src/components/comment/comment.js","webpack:///./src/components/toc/toc.jsx","webpack:///./src/templates/post.js"],"names":["Comment","colorMode","useColorMode","src","containerRef","useRef","useEffect","comment","attributes","message","themeMode","utterancesEl","current","querySelector","type","theme","contentWindow","postMessage","document","createElement","config","githubInfo","Object","entries","forEach","key","value","setAttribute","appendChild","ref","Toc","styled","div","TOC","props","toc","dangerouslySetInnerHTML","__html","PostContentWrapper","MetaWrapper","PostTemplate","markdownRemark","data","frontmatter","html","tableOfContents","className","title","date","tags","tag","query"],"mappings":"wQAIaA,EAAU,WAAO,IACrBC,EAAaC,cADO,GAErBC,EAAI,gCAIJC,EAAeC,iBAAO,MA+B5B,OA9BAC,qBAAU,WAER,IAEQC,EACAC,EAgBAC,EAnBFC,EAA0B,SAAdT,EAJD,cADC,eA8BZU,EAAeP,EAAaQ,QAAQC,cA/BjB,2BAgCzBF,GAPQF,EAAU,CACdK,KAAM,YACNC,MAAOL,GAETC,EAAaK,cAAcC,YAAYR,EAASN,KArB1CI,EAAUW,SAASC,cAAc,UACjCX,EAAa,CACjB,IAAM,GAAIL,EACV,KAAQiB,IAAOC,WACf,aAAc,WACd,MAASX,EACT,YAAe,YACf,OAAS,EACT,mBAAqB,EACrB,uBAAyB,GAE3BY,OAAOC,QAAQf,GAAYgB,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDnB,EAAQoB,aAAaF,EAAKC,MAE5BtB,EAAaQ,QAAQgB,YAAYrB,MAWlC,CAACN,IACG,mBAAK4B,IAAKzB,K,YCtCb0B,EAAMC,IAAOC,IAAV,+DAAGD,CAAH,gIAWIE,EAAM,SAAAC,GACjB,IAAMC,EAAMD,EAAMC,IAElB,OAAO,YAACL,EAAD,CAAKM,wBAAyB,CAAEC,OAAQF,MCL3CG,EAAqBP,IAAOC,IAAV,+EAAGD,CAAH,6OA0BlBQ,EAAcR,IAAOC,IAAV,wEAAGD,CAAH,6KAeF,SAASS,EAAT,GAAiC,IAEtCC,EAFqC,EAARC,KAE7BD,eACAE,EAAsCF,EAAtCE,YAAaC,EAAyBH,EAAzBG,KAAMC,EAAmBJ,EAAnBI,gBAC3B,OACE,YAAC,IAAD,KACE,2BACE,2BACE,mBAAKC,UAAU,uBACb,mBAAKA,UAAU,aACb,YAACP,EAAD,KACE,sBAAKI,EAAYI,OACjB,mBAAKD,UAAU,QAAQH,EAAYK,MAEnC,mBAAKF,UAAU,QACZH,EAAYM,KAAKzB,SAAQ,SAAA0B,GACxB,OAAQ,wBAAOA,QAKrB,YAAC,EAAD,CAAKf,IAAKU,IAEV,YAACP,EAAD,CACEQ,UAAU,oBACVV,wBAAyB,CAAEC,OAAQO,QAK3C,uBAEE,YAAC,EAAD,SAOH,IAAMO,EAAK,a","file":"component---src-templates-post-js-60ece793ff1de7bfe798.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport config from './../../../_config'\nimport { useColorMode } from 'theme-ui';\n\nexport const Comment = () => {\n  const [colorMode] = useColorMode();\n  const src=\"https://utteranc.es/client.js\";\n  const utterancesSelector = 'iframe.utterances-frame';\n  const LIGHT_THEME = 'github-light';\n  const DARK_THEME = 'photon-dark'; // \"dark-blue\" \n  const containerRef = useRef(null);\n  useEffect(()=>{\n    \n    const themeMode = colorMode === 'dark' ? DARK_THEME : LIGHT_THEME;\n    const createUtterancesEl = () => {\n      const comment = document.createElement('script');\n      const attributes = {\n        'src': `${src}`,\n        'repo': config.githubInfo,\n        'issue-term': \"pathname\",\n        'theme': themeMode,\n        'crossorigin': 'anonymous',\n        'async': true,\n        \"chromeWebSecurity\": false,\n        \"modifyObstructiveCode\": false\n      };\n      Object.entries(attributes).forEach(([key, value]) => {\n        comment.setAttribute(key, value);\n      });\n      containerRef.current.appendChild(comment);\n    }\n    const postThemeMessage = () => {\n      const message = {\n        type: 'set-theme',\n        theme: themeMode,\n      };\n      utterancesEl.contentWindow.postMessage(message, src);\n    };\n    const utterancesEl = containerRef.current.querySelector(utterancesSelector);\n    utterancesEl ? postThemeMessage() : createUtterancesEl();\n  }, [colorMode]);\n  return <div ref={containerRef} />;\n}\n\n\n\n// reference: https://www.sungikchoi.com/blog/gatsby-dark-mode/","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Toc = styled.div`\n  opacity: 0.6;\n  margin: 1rem 0 1rem 0;\n  border-left: 4px solid;\n  font-size: 0.85em;\n  ul,li {\n    list-style-type: none;\n  }\n  li:hover {opacity: 0.9;}\n`\n\nexport const TOC = props => {\n  const toc = props.toc\n\n  return <Toc dangerouslySetInnerHTML={{ __html: toc }} />\n}\n","import React from 'react'\r\n// import { useEffect, useState, useCallback, Suspense, useRef } from 'react';\r\n// import { useColorMode } from 'theme-ui';\r\nimport { graphql } from \"gatsby\"\r\nimport { Layout } from './../components/layout/layout'\r\nimport './../styles/code-style.scss'\r\nimport { Comment } from './../components/comment/comment'\r\nimport {TOC} from './../components/toc/toc'\r\n\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst PostContentWrapper = styled.div`\r\n  margin-top: 1rem;\r\n\r\n  h1, h2{\r\n    margin-top: 4rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n  h3{\r\n    margin-top: 3rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  h3, h4, h5, h6{\r\n    margin-top: 3rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  table{\r\n    display: block;\r\n    max-width: -moz-fit-content;\r\n    max-width: fit-content;\r\n    overflow-x: auto;\r\n  }\r\n`\r\n\r\n\r\nconst MetaWrapper = styled.div`\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #8383837e;\r\n  .date, .tags{\r\n    font-size: .9rem;\r\n    font-weight: 400;\r\n    opacity: .8;\r\n  }\r\n  .tags{\r\n    span{margin-right: .5em;}\r\n    span:before{content: '#';}   }\r\n  }\r\n`\r\n\r\n\r\nexport default function PostTemplate({ data }) {\r\n\r\n  const { markdownRemark } = data // data.markdownRemark holds your post data\r\n  const { frontmatter, html, tableOfContents} = markdownRemark;\r\n  return (\r\n    <Layout>\r\n      <section>\r\n        <article>\r\n          <div className=\"blog-post-container\">\r\n            <div className=\"blog-post\">\r\n              <MetaWrapper>\r\n                <h1>{frontmatter.title}</h1>\r\n                <div className=\"date\">{frontmatter.date}</div>\r\n                \r\n                <div className=\"tags\">\r\n                  {frontmatter.tags.forEach(tag => {\r\n                    return (<span>{tag}</span>)\r\n                  })}\r\n                </div>\r\n              </MetaWrapper>\r\n\r\n              <TOC toc={tableOfContents}/>\r\n              \r\n              <PostContentWrapper\r\n                className=\"blog-post-content\"\r\n                dangerouslySetInnerHTML={{ __html: html }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </article>\r\n        <div>\r\n\r\n          <Comment></Comment>\r\n        </div>\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    markdownRemark(fields: {slug: {eq: $slug}}) {\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        title\r\n        tags\r\n      }\r\n      fields{\r\n        slug\r\n      }\r\n      tableOfContents(maxDepth: 3)\r\n    }\r\n  }\r\n`"],"sourceRoot":""}