{"componentChunkName":"component---src-templates-post-js","path":"/gatsby/2-make-page/2020-11-24-2-make-page_1/","result":{"data":{"markdownRemark":{"html":"<h1>Markdown 으로 페이지 생성하기</h1>\n<h2>plugin</h2>\n<p>Gatsby에서는 Markdown 파일을 생성할 때 아래와 같이 <code>frontmatter</code> 형식으로 페이지와 관련된 데이터를 제공한다.</p>\n<pre><code class=\"language-markdown\">---\ntitle: \"hello world\"\ndate: \"2020-11-25\"\n---\n</code></pre>\n<p>해당 데이터를 읽기 위해서는 <code>gatsby-source-filesystem</code>와 <code>gatsby-transformer-remark</code> 플러그인이 필요하다.</p>\n<p><code>gatsby-source-filesystem</code> 플러그인을 통해 파일에서 데이터를 가져오고 <code>gatsby-transformer-remark</code> 플러그인을 통해 해당 데이터를 인식가능한 형태로 변환한다.</p>\n<h3>install plugin</h3>\n<pre><code class=\"language-shell\"># install plugin for read file\n$  npm install --save gatsby-source-filesystem\n\n# install plugin for read file\n$ npm install --save gatsby-transformer-remark\n</code></pre>\n<h3>setting plugin</h3>\n<pre><code class=\"language-js\">// gatsby-config.js\n\nplugins: [\n  {\n    resolve: `gatsby-source-filesystem`,\n    options: {\n      path: `${__dirname}/content/posts`,\n      name: `markdown-pages`,\n    },\n  },\n  `gatsby-transformer-remark`,\n]\n</code></pre>\n<p><code>${__dirname}/content/posts</code>: markdown 파일이 위치한 곳</p>\n<h2>Page Template</h2>\n<p>Markdown 파일 상단은 <code>frontmatter</code> 포맷으로 쓰여진 데이터는 Markdown 파일에 대한 페이지 템플릿을 만드는데 활용된다. (해당 내용은 아래의 \"프로그래밍 방식으로 페이지 생성\"과 이어진다)</p>\n<pre><code class=\"language-jsx\">// src/templates/post.js\n\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\n\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    &#x3C;div className=\"blog-post-container\">\n      &#x3C;div className=\"blog-post\">\n        &#x3C;h1>{frontmatter.title}&#x3C;/h1>\n        &#x3C;h2>{frontmatter.date}&#x3C;/h2>\n        &#x3C;div\n          className=\"blog-post-content\"\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      &#x3C;/div>\n    &#x3C;/div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n      }\n    }\n  }\n`\n</code></pre>\n<h1>블로그에 Page 생성하기</h1>\n<p>페이지는 다음 방법으로 만들 수 있다.</p>\n<ol>\n<li>src/pages 디렉토리에 컴포넌트를 생성</li>\n<li>프로그래밍 방식으로 페이지 생성</li>\n</ol>\n<h2>페이지 컴포넌트 생성</h2>\n<p>페이지를 만들고 싶다면  <code>src/pages/</code> 디렉토리에 컴포넌트를 생성하면 된다.<br>\ngatsby core 는 <code>src/pages/</code>의 컴포넌트를 자동으로 URL이 있는 페이지로 변환한다.</p>\n<p>예를 들어 <code>src/pages/index.js</code> 는 <code>/</code> 링크로 접속가능한 페이지로, <code>src/pages/about.js</code>는 <code>/about</code>으로 접속가능한 페이지로 변환된다. </p>\n<p>아래는 categories 페이지를 만들기 위한 예제 코드이다.</p>\n<pre><code class=\"language-jsx\">// src/pages/about.js\n\nimport React from \"react\"\n\nconst CategoriesPage = () => (\n  &#x3C;main>\n    &#x3C;h1>Categories&#x3C;/h1>\n    &#x3C;p>welcome to my gatsby site&#x3C;/p>\n  &#x3C;/main>\n)\n\nexport default CategoriesPage\n</code></pre>\n<h2>프로그래밍 방식으로 Page 생성</h2>\n<p>블로그 포스트를 작성할 때 마다 컴포넌트를 작성하라고 하면 욕이 나오지 않을까 싶다.<br>\n다행히도 <code>createPage</code>를 사용하여 프로그래밍 방식으로 페이지를 만들 수 있다. <br></p>\n<h2>for create page</h2>\n<h3>slug (path)</h3>\n<p><code>slug (슬러그)</code>는 <code>www.google.com/image</code> 에서 <code>image</code> 와 같이 고유한 웹 페이지 주소를 식별하는 역할을 한다.<br>\n<br>'path (경로)' 라고도 하나, gatsby 에서는 <code>slug</code>라는 용어를 사용한다.</p>\n<p>페이지를 자동으로 만드려면 해당 페이지에 접속하기 위한 웹 페이지 주소, 즉 슬러그도 생성해야 한다.\n<code>gatsby-source-filesystem</code> 플러그인에 슬러그를 만드는 기능이 있다. </p>\n<pre><code class=\"language-shell\">#install gatsby-source-filesystem\n$ npm install --save gatsby-source-filesystem\n</code></pre>\n<h3>gatsby-node.js에서 슬러그 생성</h3>\n<p><code>gatsby-node.js</code> 파일은 Gatsby의 Node.js API를 구현하는 파일이다. 빌드 프로세스에 영향을 미치는 기본 설정을 사용자 정의하고 확장한다.</p>\n<p>새로운 슬러그는 <code>MarkdownRemark</code> 노드에 추가하여 데이터를 쿼리할 수 있도록 한다. <code>createNodeField</code> 기능을 이용하면 다른 플러그인에서 만든 노드에 필드를 추가할 수 있다.</p>\n<p>프로젝트 루트 디렉토리에 <code>gatsby-node.js</code> 파일이 없다면 생성한 뒤에 아래 내용을 작성한다.</p>\n<pre><code class=\"language-js\">//gatsby-node.js\n\nconst { createFilePath } = require(`gatsby-source-filesystem`)\n\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    })\n  }\n}\n</code></pre>\n<h3>createPages</h3>\n<p>createPages 은 프로그래밍 방식으로 페이지를 만드는 핵심 기능이다.</p>\n<pre><code class=\"language-js\">// gatsby-node.js\n\nexports.createPages = async function ({ actions, graphql }) {\n  const { data } = await graphql(`\n    query {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `)\n  data.allMarkdownRemark.edges.forEach(edge => {\n    const slug = edge.node.fields.slug\n    actions.createPage({\n      path: slug,\n      component: require.resolve(`./src/templates/post.js`),\n      context: { slug: slug },\n    })\n  })\n}\n</code></pre>\n<p>만들려는 각 페이지의 경로와 해당 페이지를 렌더링 하기위한 템플릿을 지정해주어야 한다.\n위의 예제는 모든 슬러그에 대해 페이지를 생성하고 있으며, <br>\n템플릿 파일은 <code>./src/templates/post.js</code>이다.</p>","frontmatter":{"date":"November 25, 2020","title":"Gatsby로 Gitpage 블로그 만들기 2: 페이지 생성"}}},"pageContext":{"slug":"/gatsby/2-make-page/2020-11-24-2-make-page_1/"}},"staticQueryHashes":[]}