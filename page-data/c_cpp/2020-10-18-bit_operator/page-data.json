{"componentChunkName":"component---src-templates-post-js","path":"/c_cpp/2020-10-18-bit_operator/","result":{"data":{"markdownRemark":{"html":"<h1>1. 비트 연산자</h1>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>연산자</th>\n<th>사용 방법</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AND</td>\n<td>&#x26;</td>\n<td>A &#x26; B</td>\n<td>A, B가 모두 1인 경우 1</td>\n</tr>\n<tr>\n<td>OR</td>\n<td>|</td>\n<td>A | B</td>\n<td>A 또는 B 둘 중 하나가 1인 경우 1</td>\n</tr>\n<tr>\n<td>XOR</td>\n<td>^</td>\n<td>A ^ B</td>\n<td>A, B 가 서로 다른 경우 1</td>\n</tr>\n<tr>\n<td>좌측 시프트</td>\n<td>&#x3C;&#x3C;</td>\n<td>A &#x3C;&#x3C; B</td>\n<td>A의 비트를 B만큼 왼쪽으로 시프트<br>ex) 0010 &#x3C;&#x3C; 1 = 0100</td>\n</tr>\n<tr>\n<td>우측 시프트</td>\n<td>>></td>\n<td>A >> B</td>\n<td>A의 비트를 B만큼 오른쪽으로 시프트<br>ex) 0010 >> 1 = 0001</td>\n</tr>\n<tr>\n<td>NOT</td>\n<td>~</td>\n<td>~A</td>\n<td>A의 비트를 반전<br> ex) ~(0101) = 1010</td>\n</tr>\n</tbody>\n</table>\n<h1>2. 유용한 정보</h1>\n<h2>2.1. 시프트 연산자는 음수에 사용하면 안된다</h2>\n<ul>\n<li>\n<p>시프트 연산자는 음수에 사용하면 비트 오버플로우가 발생하여 예상치 않은 결과가 발생한다.</p>\n<ul>\n<li>피연산자가 음수이면 정의되지 않은 동작이 발생한다.</li>\n<li>같은 이유로 숫자가 정수 크기보다 많이 이동하면 정의되지 않은 동작이 발생한다.</li>\n</ul>\n</li>\n</ul>\n<h2>2.2. XOR bit operator</h2>\n<p>비트 XOR 연산자는 기술 인터뷰 / 알고리즘 문제에서 유용한 연산자이다</p>\n<p>비트 XOR 연산자는 많은 문제에서 사용된다. 간단한 예로, 모든 요소가 하나의 숫자를 제외하고 짝수 번 발생하는 일련의 숫자가 주어졌을 때, <strong>홀수 번 발생하는 숫자 <code class=\"language-text\">N</code></strong>를 찾아야 한다면 XOR 연산자를 사용하여 쉽게 풀 수 있다. <br>\nXOR 연산자는 <strong>피연산자들이 서로 다른 경우 1을 반환</strong>하는데 반대로 <strong>서로 같은 경우에는 0을 반환</strong>한다. XOR 연산을 거치면 <strong>같은 비트 자리에 1이 짝수번 반복되어 나왔을 때 해당 자리는 0</strong>이된다. 해당 원리를 이용하여 홀수 번 발생하는 숫자 <code class=\"language-text\">N</code>을 쉽게 찾을 수 있다.</p>\n<h4>code</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// function to return the only odd occurring element</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">findOdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the odd occurring element is %d\\\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">findOdd</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>output</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">the odd occurring element is 3</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>2.3. &#x26; bit operator</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">&amp;</code> 연산자를 이용하면 숫자가 홀수인지 짝수인지를 빠르게 확인 가능하다.</p>\n<ul>\n<li>표현식 <code class=\"language-text\">N&amp;1</code>의 값은 <code class=\"language-text\">N</code>이 홀수인 경우에는 1이고, 짝수인 경우에는 0이다. </li>\n<li>만약 <code class=\"language-text\">N</code>이 홀수라면 비트의 최하위비트 $(2^0)$가 1이어야 하고, 짝수라면 0이어야 한다. <code class=\"language-text\">N</code>과 1에 대해 AND 연산을 하면 마지막 비트가 1인 경우 (홀수인 경우)에만 1이 되므로 짝수인지 홀수인지를 빠르게 알아낼 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h4>code</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// function to return whether the number is odd or not.</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isOdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token boolean\">true</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3 is odd?: %d\\\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isOdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4 is odd?: %d\\\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isOdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7 is odd?: %d\\\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isOdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>output</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token number\">3</span> is odd<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token number\">4</span> is odd<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token number\">7</span> is odd<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","frontmatter":{"date":"2020-10-18","title":"[C/C++] 비트 연산자 (bit operator)","tags":["C/C++","bit"]},"fields":{"slug":"/c_cpp/2020-10-18-bit_operator/"}}},"pageContext":{"slug":"/c_cpp/2020-10-18-bit_operator/"}},"staticQueryHashes":["2827402515","554375791"]}