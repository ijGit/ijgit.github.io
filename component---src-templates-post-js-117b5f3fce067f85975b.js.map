{"version":3,"sources":["webpack:///./src/components/comment/comment.jsx","webpack:///./src/components/toc/toc.jsx","webpack:///./src/templates/post.js","webpack:///./src/components/tags/tags.jsx"],"names":["Comment","colorMode","useColorMode","src","containerRef","useRef","useEffect","comment","attributes","message","themeMode","utterancesEl","current","querySelector","type","theme","contentWindow","postMessage","document","createElement","config","githubInfo","Object","entries","forEach","key","value","setAttribute","appendChild","ref","Toc","styled","div","TOC","props","toc","dangerouslySetInnerHTML","__html","PostContainer","PostTitle","DateContainer","MetaWrapper","PostTemplate","data","markdownRemark","frontmatter","html","excerpt","tableOfContents","title","description","keywords","tags","siteData","site","className","id","date","query","TagsContainer","TagList","map","tag"],"mappings":"iRAIaA,EAAU,WAAO,IACrBC,EAAaC,cADO,GAErBC,EAAI,gCAIJC,EAAeC,iBAAO,MA+B5B,OA9BAC,qBAAU,WAER,IAEQC,EACAC,EAgBAC,EAnBFC,EAA0B,SAAdT,EAJD,cADC,eA8BZU,EAAeP,EAAaQ,QAAQC,cA/BjB,2BAgCzBF,GAPQF,EAAU,CACdK,KAAM,YACNC,MAAOL,GAETC,EAAaK,cAAcC,YAAYR,EAASN,KArB1CI,EAAUW,SAASC,cAAc,UACjCX,EAAa,CACjB,IAAM,GAAIL,EACV,KAAQiB,IAAOC,WACf,aAAc,WACd,MAASX,EACT,YAAe,YACf,OAAS,EACT,mBAAqB,EACrB,uBAAyB,GAE3BY,OAAOC,QAAQf,GAAYgB,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDnB,EAAQoB,aAAaF,EAAKC,MAE5BtB,EAAaQ,QAAQgB,YAAYrB,MAWlC,CAACN,IACG,mBAAK4B,IAAKzB,K,YCtCb0B,EAAMC,IAAOC,IAAV,+DAAGD,CAAH,gIAWIE,EAAM,SAAAC,GACjB,IAAMC,EAAMD,EAAMC,IAElB,OAAO,YAACL,EAAD,CAAKM,wBAAyB,CAAEC,OAAQF,M,wBCH3CG,G,oBAAgBP,IAAOC,IAAV,0EAAGD,CAAH,uQA2BbQ,EAAYR,IAAOC,IAAV,sEAAGD,CAAH,wBAMTS,EAAgBT,IAAOC,IAAV,0EAAGD,CAAH,wDAMbU,EAAcV,IAAOC,IAAV,wEAAGD,CAAH,4FAOF,SAASW,EAAT,GAAiC,IAATC,EAAQ,EAARA,KAE7BC,EAAmBD,EAAnBC,eACAC,EAAgDD,EAAhDC,YAAaC,EAAmCF,EAAnCE,KAAMC,EAA6BH,EAA7BG,QAASC,EAAoBJ,EAApBI,gBACpC,OACE,8BACA,YAAC,IAAD,CAAMC,MAAOJ,EAAYI,MAAOC,YAAaH,EAASI,SAAWN,EAAYO,OAC7E,YAAC,IAAD,CAAQC,SAAUV,EAAKW,MACrB,mBAAKC,UAAU,gBACb,YAAC,EAAD,CAAKpB,IAAKa,KAGZ,uBAASQ,GAAG,WACV,2BACE,YAAClB,EAAD,KACE,mBAAKiB,UAAU,aAEb,YAACd,EAAD,KACE,YAACF,EAAD,KACE,sBACGM,EAAYI,QAGjB,YAACT,EAAD,KAAgBK,EAAYY,MAC5B,YAAC,IAAD,CAASL,KAAMP,EAAYO,QAG7B,mBAAKG,UAAU,iBACb,YAAC,EAAD,CAAKpB,IAAKa,KAGZ,mBACEO,UAAU,oBACVnB,wBAAyB,CAAEC,OAAQS,QAM3C,uBAEE,YAAC,EAAD,UAQH,IAAMY,EAAK,c,yDC7GlB,wEAGMC,EAAgB5B,IAAOC,IAAV,0EAAGD,CAAH,+GAcN6B,EAAU,SAAC,GAAc,IAAZR,EAAW,EAAXA,KACxB,OACE,YAACO,EAAD,KACGP,EAAKS,KAAI,SAAAC,GACR,OAAQ,oBAAMP,UAAU,OAAO9B,IAAKqC,GAAMA,S","file":"component---src-templates-post-js-117b5f3fce067f85975b.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport config from '../../../_config'\nimport { useColorMode } from 'theme-ui';\n\nexport const Comment = () => {\n  const [colorMode] = useColorMode();\n  const src=\"https://utteranc.es/client.js\";\n  const utterancesSelector = 'iframe.utterances-frame';\n  const LIGHT_THEME = 'github-light';\n  const DARK_THEME = 'photon-dark'; // \"dark-blue\" \n  const containerRef = useRef(null);\n  useEffect(()=>{\n    \n    const themeMode = colorMode === 'dark' ? DARK_THEME : LIGHT_THEME;\n    const createUtterancesEl = () => {\n      const comment = document.createElement('script');\n      const attributes = {\n        'src': `${src}`,\n        'repo': config.githubInfo,\n        'issue-term': \"pathname\",\n        'theme': themeMode,\n        'crossorigin': 'anonymous',\n        'async': true,\n        \"chromeWebSecurity\": false,\n        \"modifyObstructiveCode\": false\n      };\n      Object.entries(attributes).forEach(([key, value]) => {\n        comment.setAttribute(key, value);\n      });\n      containerRef.current.appendChild(comment);\n    }\n    const postThemeMessage = () => {\n      const message = {\n        type: 'set-theme',\n        theme: themeMode,\n      };\n      utterancesEl.contentWindow.postMessage(message, src);\n    };\n    const utterancesEl = containerRef.current.querySelector(utterancesSelector);\n    utterancesEl ? postThemeMessage() : createUtterancesEl();\n  }, [colorMode]);\n  return <div ref={containerRef} />;\n}\n\n\n\n// reference: https://www.sungikchoi.com/blog/gatsby-dark-mode/","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Toc = styled.div`\n  opacity: 0.6;\n  margin: 1rem 0 1rem 0;\n  border-left: 4px solid;\n  font-size: 0.85em;\n  ul,li {\n    list-style-type: none;\n  }\n  li:hover {opacity: 0.9;}\n`\n\nexport const TOC = props => {\n  const toc = props.toc\n\n  return <Toc dangerouslySetInnerHTML={{ __html: toc }} />\n}\n","import React from 'react'\r\nimport { graphql } from \"gatsby\"\r\nimport { Layout } from './../components/layout/layout'\r\nimport './../styles/code-style.scss'\r\nimport { Comment } from './../components/comment/comment'\r\nimport { TOC } from './../components/toc/toc'\r\nimport { TagList } from './../components/tags/tags'\r\nimport { Head } from \"./../components/head/head\"\r\n\r\nimport styled from 'styled-components';\r\nimport \"katex/dist/katex.min.css\"\r\nimport './post.scss';\r\n\r\n\r\nconst PostContainer = styled.div`\r\n  margin-top: 1rem;\r\n\r\n  h1, h2{\r\n    padding-top: 4rem;\r\n    padding-bottom: 1rem;\r\n  }\r\n  h3{\r\n    padding-top: 3rem;\r\n    padding-bottom: 1rem;\r\n  }\r\n\r\n  h3, h4, h5, h6{\r\n    padding-top: 3rem;\r\n    padding-bottom: 1rem;\r\n  }\r\n\r\n  table{\r\n    display: block;\r\n    max-width: -moz-fit-content;\r\n    max-width: fit-content;\r\n    overflow-x: auto;\r\n  }\r\n\r\n  margin-bottom: 10vh;\r\n`\r\n\r\nconst PostTitle = styled.div`\r\n  h1{\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst DateContainer = styled.div`\r\n  display: inline-block;\r\n  margin-right: 1rem;\r\n  opacity: .8;\r\n`\r\n\r\nconst MetaWrapper = styled.div`\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #8383837e;\r\n  font-size: .9rem;\r\n  font-weight: 400;\r\n`\r\n\r\nexport default function PostTemplate({ data }) {\r\n\r\n  const { markdownRemark } = data // data.markdownRemark holds your post data\r\n  const { frontmatter, html, excerpt, tableOfContents } = markdownRemark;\r\n  return (\r\n    <>\r\n    <Head title={frontmatter.title} description={excerpt} keywords={(frontmatter.tags)} />\r\n    <Layout siteData={data.site}>\r\n      <div className='toc-fullsize'>\r\n        <TOC toc={tableOfContents} />\r\n      </div>\r\n\r\n      <section id=\"content\">\r\n        <article>\r\n          <PostContainer>\r\n            <div className=\"blog-post\">\r\n\r\n              <MetaWrapper>\r\n                <PostTitle>\r\n                  <h1>\r\n                    {frontmatter.title}\r\n                  </h1>\r\n                </PostTitle>\r\n                <DateContainer>{frontmatter.date}</DateContainer>\r\n                <TagList tags={frontmatter.tags} />\r\n              </MetaWrapper>\r\n\r\n              <div className='toc-smallsize'>\r\n                <TOC toc={tableOfContents} />\r\n              </div>\r\n\r\n              <div\r\n                className=\"blog-post-content\"\r\n                dangerouslySetInnerHTML={{ __html: html }}\r\n              />\r\n\r\n            </div>\r\n          </PostContainer>\r\n        </article>\r\n        <div>\r\n\r\n          <Comment></Comment>\r\n        </div>\r\n      </section>\r\n    </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(fields: {slug: {eq: $slug}}) {\r\n      html\r\n      excerpt\r\n      frontmatter {\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        title\r\n        tags\r\n        keywords\r\n      }\r\n      fields{\r\n        slug\r\n      }\r\n      tableOfContents(maxDepth: 3)\r\n    }\r\n  }\r\n`","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst TagsContainer = styled.div` \n  display: inline-block;\n\n  font-size: 0.85rem;\n  opacity: 0.7;\n\n  .item{\n    margin-right: .5rem;\n  }\n  .item:before{\n    content: '#';\n  }\n`\n\nexport const TagList = ({ tags }) => {\n  return(\n    <TagsContainer>\n      {tags.map(tag => {\n        return (<span className='item' key={tag}>{tag}</span>)\n      })}\n    </TagsContainer>\n  )\n}"],"sourceRoot":""}